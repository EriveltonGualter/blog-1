<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Alexandre Vicenzi's Blog</title><link href="https://blog.alexandrevicenzi.com/" rel="alternate"></link><link href="https://blog.alexandrevicenzi.com/feeds/all.atom.xml" rel="self"></link><id>https://blog.alexandrevicenzi.com/</id><updated>2015-10-07T08:00:00-04:00</updated><entry><title>New version of Flex: The responsive Pelican theme</title><link href="https://blog.alexandrevicenzi.com/flex-pelican-theme-update-1-1.html" rel="alternate"></link><updated>2015-10-07T08:00:00-04:00</updated><author><name>Alexandre Vicenzi</name></author><id>tag:blog.alexandrevicenzi.com,2015-10-07:flex-pelican-theme-update-1-1.html</id><summary type="html">&lt;p&gt;I've made the &lt;a href="https://github.com/alexandrevicenzi/Flex"&gt;Flex theme&lt;/a&gt; a time ago. For my surprise, many people are using it. I feel thankful for this.&lt;/p&gt;
&lt;p&gt;So, after some new blogs with this theme, I got issues and PRs on GitHub from these new users. This weekend I had some free time and I release the &lt;a href="https://github.com/alexandrevicenzi/Flex/releases/tag/v1.1"&gt;second version&lt;/a&gt; of Flex (aka v1.1).&lt;/p&gt;
&lt;p&gt;This new version doesn't include nothing so special, just some bug fix and a new setting to allow custom CSS stylesheets.&lt;/p&gt;
&lt;p&gt;The new custom setting can be used like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;EXTRA_PATH_METADATA&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s"&gt;&amp;#39;extra/custom.css&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;path&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;static/custom.css&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="n"&gt;CUSTOM_CSS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;static/custom.css&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I would like to thank all who helped in this new version.&lt;/p&gt;</summary><category term="pelican"></category><category term="python"></category><category term="theme"></category></entry><entry><title>Flex: Responsive Pelican theme</title><link href="https://blog.alexandrevicenzi.com/flex-pelican-theme.html" rel="alternate"></link><updated>2015-07-22T08:00:00-04:00</updated><author><name>Alexandre Vicenzi</name></author><id>tag:blog.alexandrevicenzi.com,2015-07-22:flex-pelican-theme.html</id><summary type="html">&lt;p&gt;I just start a new fresh blog using &lt;a href="http://getpelican.com"&gt;Pelican&lt;/a&gt;. Sometimes choosing a theme for a new site is something difficult that takes time.&lt;/p&gt;
&lt;p&gt;In the Pelican &lt;a href="http://www.pelicanthemes.com/"&gt;theme gallery&lt;/a&gt;, I couldn't find anything that I really liked to feet all my needs. So in the first time of the history, I choose to create my own theme. I never did this before.&lt;/p&gt;
&lt;p&gt;Creating a theme for Pelican is quite easy, unlike Wordpress. You can take a look in the &lt;a href="https://github.com/alexandrevicenzi/Flex"&gt;Source Code of Flex&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;But how Flex looks like? Well, you can see &lt;a href="https://raw.githubusercontent.com/alexandrevicenzi/Flex/master/screenshot.png"&gt;this screenshot&lt;/a&gt;, but you already know how it looks like, you're looking at it. :D&lt;/p&gt;
&lt;p&gt;I really care about SEO and integrations with Facebook, Google Plus and other social networks, so this theme offers some features:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Mobile First&lt;/li&gt;
&lt;li&gt;Responsive&lt;/li&gt;
&lt;li&gt;Semantic&lt;/li&gt;
&lt;li&gt;SEO Best Practices&lt;/li&gt;
&lt;li&gt;Open Graph&lt;/li&gt;
&lt;li&gt;Rich Snippets (JSON-LD)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Maybe these features are not fully optimized, but I'll improve.&lt;/p&gt;
&lt;p&gt;Flex also offers integrations with multiple services.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Tip:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;You can easyly integrate with:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;AddThis&lt;/li&gt;
&lt;li&gt;Disqus&lt;/li&gt;
&lt;li&gt;Google Analytics&lt;/li&gt;
&lt;li&gt;Google Tag Manager&lt;/li&gt;
&lt;li&gt;StatusCake&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;Flex is a theme built by a developer for developers, but of course, you can use for any purpose. In this scenario, Flex is able to create good styles for coding, outputs and samples.&lt;/p&gt;
&lt;p&gt;If you need to show some program output you can use &lt;code&gt;samp&lt;/code&gt; tag to look like this:&lt;/p&gt;
&lt;p&gt;&lt;samp&gt;Done: Processed 4 articles, 0 drafts, 2 pages and 0 hidden pages in 0.22 seconds.&lt;/samp&gt;&lt;/p&gt;
&lt;p&gt;Or if you want multiple lines:&lt;/p&gt;
&lt;p&gt;&lt;samp&gt;
             total       used       free     shared    buffers     cached
Mem:          5866       4674       1192        386          0       2404
-/+ buffers/cache:       2269       3596
Swap:        20480       1267      19213
&lt;/samp&gt;&lt;/p&gt;
&lt;p&gt;If you like to share code snippets, you can take advantage of &lt;a href="http://pygments.org/"&gt;Pygments&lt;/a&gt; syntax highlighting:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;// Foo&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;bar&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Foo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bar&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bar&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; The code block looks like GitHubâ€™s colors.&lt;/p&gt;
&lt;p&gt;You can add tables too:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Item&lt;/th&gt;
&lt;th&gt;Value&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Computer&lt;/td&gt;
&lt;td&gt;$1600&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Phone&lt;/td&gt;
&lt;td&gt;$12&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Pipe&lt;/td&gt;
&lt;td&gt;$1&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;and how heading looks like?&lt;/p&gt;
&lt;h1&gt;This is heading 1&lt;/h1&gt;
&lt;h2&gt;This is heading 2&lt;/h2&gt;
&lt;h3&gt;This is heading 3&lt;/h3&gt;
&lt;h4&gt;This is heading 4&lt;/h4&gt;
&lt;h5&gt;This is heading 5&lt;/h5&gt;
&lt;h6&gt;This is heading 6&lt;/h6&gt;
&lt;p&gt;This examples are in Markdown. I'm not sure how it will look using reStructuredText. Keep in mind that Markdown allows you to add HTML tags. If you can create the same HTML syntax produced by Markdown using reStructuredText it will work.&lt;/p&gt;
&lt;p&gt;You can take a look in the &lt;a href="https://raw.githubusercontent.com/alexandrevicenzi/blog/master/content/News/flex-pelican-theme.md"&gt;source code of this page&lt;/a&gt; to know how to create rich examples.&lt;/p&gt;
&lt;p&gt;Flex is my first attempt creating themes and there's no IE testing yet. You can check the &lt;a href="https://github.com/alexandrevicenzi/flex"&gt;sources here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;As soon as possible I will add this project to Pelican gallery.&lt;/p&gt;
&lt;p&gt;Drop a comment if you like this theme, or &lt;a href="https://github.com/alexandrevicenzi/Flex/issues"&gt;open an issue&lt;/a&gt; if you need a feature or found a bug.&lt;/p&gt;</summary><category term="pelican"></category><category term="python"></category><category term="theme"></category></entry><entry><title>Nunjucks eval tag</title><link href="https://blog.alexandrevicenzi.com/nunjucks-eval.html" rel="alternate"></link><updated>2015-07-11T08:00:00-04:00</updated><author><name>Alexandre Vicenzi</name></author><id>tag:blog.alexandrevicenzi.com,2015-07-11:nunjucks-eval.html</id><summary type="html">&lt;p&gt;This week I started to work in &lt;a href="https://github.com/alexandrevicenzi/gistfy"&gt;Gistfy project&lt;/a&gt; again, and one of the changes is replace &lt;a href="https://github.com/paularmstrong/swig"&gt;swig&lt;/a&gt; by &lt;a href="http://mozilla.github.io/nunjucks/"&gt;Nunjucks&lt;/a&gt;. &lt;a href="https://github.com/paularmstrong/swig/issues/628"&gt;swig is no longer maintained&lt;/a&gt;, and Nunjucks looks a really cool project.&lt;/p&gt;
&lt;p&gt;I like Nunjucks because it has a Django like template engine. In fact, Nunjucks is a &lt;a href="http://mozilla.github.io/nunjucks/templating.html#templating"&gt;port of Jinja2&lt;/a&gt;. &lt;a href="http://jinja.pocoo.org/docs/dev/"&gt;Jinja2&lt;/a&gt; is a Python template engine.&lt;/p&gt;
&lt;p&gt;Nunjucks is very simple to use and has a lot of filters and tags in it, if you're a Django user it will be very easy to create something with it. In fact, I created an &lt;em&gt;evil&lt;/em&gt; extension to allow me to eval some JS code.&lt;/p&gt;
&lt;p&gt;This all started because I needed to put the current year in my page. I could use JS in browser or use a variable and pass through render to do this. But no, I decided to eval the code using a template tag. Well, there's no tag for this, I think, so I built one.&lt;/p&gt;
&lt;p&gt;It's very simple to use the tag and looks like &lt;a href="http://mozilla.github.io/nunjucks/templating.html#set"&gt;set&lt;/a&gt; tag.&lt;/p&gt;
&lt;p&gt;In the server:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;nunjucks&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;nunjucks&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="nx"&gt;njeval&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;nunjucks-eval&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;env&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;nunjucks&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;configure&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;autoescape&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;njeval&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;install&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And then in the view:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;eval&lt;/span&gt; &lt;span class="nv"&gt;year&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;new Date().getFullYear()&amp;quot;&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;span&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;year&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You can check the &lt;a href="https://github.com/alexandrevicenzi/nunjucks-eval"&gt;source code of nunjucks-eval&lt;/a&gt;, it's very simple and small.&lt;/p&gt;</summary><category term="nunjucks"></category><category term="eval"></category><category term="jinja2"></category><category term="NodeJS"></category></entry><entry><title>New version of Django-PJAX</title><link href="https://blog.alexandrevicenzi.com/new-version-django-pjax.html" rel="alternate"></link><updated>2015-07-08T15:00:00-04:00</updated><author><name>Alexandre Vicenzi</name></author><id>tag:blog.alexandrevicenzi.com,2015-07-08:new-version-django-pjax.html</id><summary type="html">&lt;p&gt;The Django-PJAX was discontinued by &lt;a href="http://jacobian.org/"&gt;Jacob Kaplan-Moss&lt;/a&gt;, the creator of this project. We at &lt;a href="https://www.eventials.com"&gt;Eventials&lt;/a&gt; need to use Django-PJAX, so we decided to keep this project up-to-date.&lt;/p&gt;
&lt;p&gt;We forked the original project to add a new feature, allow Django-PJAX to specify a container name. This is useful if you have more than one PJAX in the same template that points to the same view. For example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;djpjax&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;pjax&lt;/span&gt;

&lt;span class="nd"&gt;@pjax&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;pjax.html&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c"&gt;# This is the default template.&lt;/span&gt;
&lt;span class="nd"&gt;@pjax&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;pjax_inner.html&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;#pjax-inner-content&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c"&gt;# This is the template for #pjax-inner-content.&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;my_view&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;TemplateResponse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;template.html&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;my&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;context&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We also add compatibility with Python 3. This new version works on Python 2 and 3 and any version of Django after 1.3.&lt;/p&gt;
&lt;p&gt;You may be asking, is this a new project? No. It's the same. We owned the &lt;a href="https://pypi.python.org/pypi/django-pjax"&gt;original PyPi project&lt;/a&gt;, so you just need to run &lt;em&gt;pip install django-pjax --upgrade&lt;/em&gt; to use this new version.&lt;/p&gt;
&lt;p&gt;You can find the new version of Django-PJAX &lt;a href="https://github.com/eventials/django-pjax"&gt;here&lt;/a&gt;. Hope you like it.&lt;/p&gt;</summary><category term="django"></category><category term="pjax"></category><category term="jQuery"></category><category term="python"></category></entry><entry><title>Alexandre's Blog is back</title><link href="https://blog.alexandrevicenzi.com/im-back.html" rel="alternate"></link><updated>2015-07-08T08:00:00-04:00</updated><author><name>Alexandre Vicenzi</name></author><id>tag:blog.alexandrevicenzi.com,2015-07-08:im-back.html</id><summary type="html">&lt;p&gt;After a while with my personal blog off, I decided to start a new one.&lt;/p&gt;
&lt;p&gt;This new blog uses &lt;a href="http://blog.getpelican.com/"&gt;Pelican&lt;/a&gt;, a static site generator powered by Python.&lt;/p&gt;
&lt;p&gt;I will use this blog to talk about things that I'm working on. Most of time will be personal projects.&lt;/p&gt;</summary><category term="blog"></category></entry></feed>